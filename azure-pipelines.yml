name: 1.0.$(rev:rrr)

trigger:
- master
- release/*

schedules:
- cron: 0 5 * * 6
  branches:
    include:
    - master
    - release/*
  always: true

strategy:
  matrix:
    linux:
      imageName: "ubuntu-latest"
      solutionName: "EndlessClient.Linux.sln"
      friendlyPlatform: "Linux"
      dropDir: net6.0
      additionalBuildArgs: ""
    windows:
      imageName: "windows-latest"
      solutionName: "EndlessClient.sln"
      friendlyPlatform: "Windows"
      dropDir: net6.0-windows
      additionalBuildArgs: ""
    macos:
      imageName: "macOS-12"
      solutionName: "EndlessClient"
      friendlyPlatform: "macOS"
      dropDir: net6.0-macos
      additionalBuildArgs: "/p:PublishReadyToRun=false /p:TieredCompilation=false --self-contained"

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: Release

steps:
- checkout: self
  persistCredentials: true
- task: UseDotNet@2
  displayName: 'Install .Net 6 runtime/sdk'
  inputs:
    version: 6.0.x
- task: Assembly-Info-NetCore@3
  displayName: 'Set assembly version and copyright info'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: '**/*.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    GenerateDocumentationFile: 'false'
    Authors: 'Ethan Moffat'
    Copyright: 'Copyright Â© 2014-2023 Ethan Moffat'
    VersionNumber: '$(Build.BuildNumber)'
    FileVersionNumber: '$(Build.BuildNumber)'
    InformationalVersion: '$(Build.BuildNumber)'
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false
- task: Assembly-Info-NetCore@3
  displayName: 'Set nuget package properties'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: |
      **/EOLib*.csproj
      !**/EOLib.*Test.csproj
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    GeneratePackageOnBuild: 'true'
    PackageRequireLicenseAcceptance: 'false'
    PackageLicenseExpression: 'MIT'
    PackageProjectUrl: 'https://github.com/ethanmoffat/EndlessClient'
    RepositoryUrl: 'https://github.com/ethanmoffat/EndlessClient'
    RepositoryType: 'git'
    PackageTags: 'endless-online eo'
    PackageVersion: '$(Build.BuildNumber)'
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false

- script: |
    echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
    sudo apt-get install -y ttf-mscorefonts-installer && sudo fc-cache -f
  displayName: 'Linux - install windows fonts'
  condition: eq(variables['friendlyPlatform'], 'Linux')
- script: dotnet workload restore
  displayName: 'macOS - restore dotnet workload'
  condition: eq(variables['friendlyPlatform'], 'macOS')

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    verbosityRestore: 'minimal'
    projects: '$(solutionName)'

# Workaround for compilation error due to generated code / Xamarin stuff on macOS
#
- task: DotNetCoreCLI@2
  displayName: 'dotnet build (first pass - macOS only)'
  continueOnError: true
  condition: eq(variables['friendlyPlatform'], 'macOS')
  inputs:
    command: 'build'
    projects: '$(solutionName)'
    arguments: '--configuration $(buildConfiguration) $(additionalBuildArgs)'
- script: |
    echo '' > EndlessClient/obj/$(buildConfiguration)/net6.0-macos/osx-x64/EndlessClient.GlobalUsings.g.*.generated.cs
  displayName: 'Erase generated code (macOS only)'
  condition: eq(variables['friendlyPlatform'], 'macOS')

- task: DotNetCoreCLI@2
  displayName: 'dotnet build - $(solutionName)'
  inputs:
    command: 'build'
    projects: '$(solutionName)'
    arguments: '--configuration $(buildConfiguration) $(additionalBuildArgs)'
- task: DotNetCoreCLI@2
  displayName: 'dotnet build - EOBot (macOS)'
  inputs:
    command: 'build'
    projects: 'EOBot'
    arguments: '--configuration $(buildConfiguration) $(additionalBuildArgs)'
  condition: eq(variables['friendlyPlatform'], 'macOS')
- task: DotNetCoreCLI@2
  displayName: 'dotnet test - skipping EOLib.Graphics.Test (not supported on VSTS agent)'
  inputs:
    command: 'test'
    projects: '$(solutionName)'
    arguments: '--filter "TestCategory!=GraphicsDevice" --configuration $(buildConfiguration)'
    testRunTitle: $(friendlyPlatform)

- task: ArchiveFiles@2
  displayName: 'ZIP EndlessClient'
  inputs:
    rootFolderOrFile: $(Build.SourcesDirectory)/bin/$(buildConfiguration)/client/$(dropDir)/
    archiveFile: $(Build.ArtifactStagingDirectory)/zip/EndlessClient.$(friendlyPlatform).zip
- task: ArchiveFiles@2
  displayName: 'ZIP EOBot'
  inputs:
    rootFolderOrFile: $(Build.SourcesDirectory)/bin/$(buildConfiguration)/utils/EOBot/net6.0/
    archiveFile: $(Build.ArtifactStagingDirectory)/zip/EOBot.$(friendlyPlatform).zip
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/zip
    ArtifactName: EndlessClient

- task: CopyFiles@2
  displayName: 'Copy nuget packages'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/bin/$(buildConfiguration)/'
    Contents: '**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/nuget'
- task: PublishBuildArtifacts@1
  displayName: 'Publish nuget Artifacts'
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/nuget
    ArtifactName: nuget.$(friendlyPlatform)

- script: |
    git tag build/$(Build.BuildNumber)
    git push origin build/$(Build.BuildNumber)
  workingDirectory:  $(Build.SourcesDirectory)
  displayName: Tag sources on CI/Manual builds
  condition: and(succeeded(), or(eq(variables['build.reason'], 'IndividualCI'), eq(variables['build.reason'], 'Manual')))
